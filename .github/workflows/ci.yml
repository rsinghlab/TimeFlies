# GitHub Actions CI/CD for TimeFlies v1.0
# Professional pipeline for automated testing and deployment

name: TimeFlies v1.0 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION_DEFAULT: "3.12"

jobs:
  # Test Matrix
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install libomp

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-xdist pytest-benchmark

    - name: Test imports
      run: |
        python -c "from common.core.config_manager import ConfigManager; print('‚úÖ Import test passed')"

    - name: Run tests
      run: |
        pytest tests/ --cov=src/common --cov-report=xml --cov-report=term -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == env.PYTHON_VERSION_DEFAULT && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Code Quality
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy

    - name: Run ruff linting
      run: |
        ruff check src/ tests/

    - name: Check code formatting with ruff
      run: |
        ruff format --check src/ tests/

    - name: Type checking with mypy
      run: |
        mypy src/common --ignore-missing-imports
      continue-on-error: true

  # Security
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml]

    - name: Run safety check
      run: |
        safety check
      continue-on-error: true

    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest

    - name: Create test data for integration tests
      run: |
        python run_timeflies.py create-test-data --tier tiny --batch-versions
        python run_timeflies.py create-test-data --tier synthetic --batch-versions

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
      continue-on-error: true

  # Documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

    - name: Build documentation
      run: |
        echo "Building TimeFlies v1.0 documentation..."
        mkdir -p docs-build
        if [ -d "docs" ]; then
          cp -r docs/* docs-build/
          echo "‚úÖ Documentation built successfully"
        else
          echo "üìù Creating minimal documentation..."
          echo "<h1>TimeFlies v1.0 Documentation</h1>" > docs-build/index.html
        fi

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs-build

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-benchmark

    - name: Run performance tests
      run: |
        pytest tests/ -k "performance" --benchmark-only
      continue-on-error: true

  # Build Release
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check distribution
      run: |
        twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distribution
        path: dist/

  # Deploy to PyPI (for releases)
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: distribution
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
