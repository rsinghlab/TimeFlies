[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "timeflies"
version = "1.0.0"
description = "Machine Learning for Aging Analysis in Drosophila Single-Cell Data with Deep Learning and Batch Correction"
authors = [{name = "Singh Lab"}]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "tensorflow>=2.13.0",
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scanpy>=1.9.0",
    "anndata>=0.9.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "shap>=0.42.0",
    "pyyaml>=6.0",
    "dill>=0.3.0",
    "xgboost>=1.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "pytest-xdist>=3.0.0",  # Parallel test execution
    "black>=23.0.0",
    "isort>=5.12.0",        # Import sorting
    "ruff>=0.1.0",          # Fast linter (replaces flake8)
    "mypy>=1.5.0",          # Type checking
    "pre-commit>=3.0.0",    # Git hooks
]
batch-correction = [
    "scvi-tools>=1.0.0",
    "torch>=2.0.0",
]

[project.scripts]
timeflies = "common.timeflies_cli:main"

[tool.black]
line-length = 88
target-version = ['py310']
exclude = '''
/(
    \.git
    | \.venv
    | __pycache__
    | build
    | dist
    | legacy
)/
'''

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "-ra",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "functional: Functional tests",
    "system: System tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["src"]
data_file = "coverage/.coverage"
omit = [
    "*/tests/*",
    "*/legacy/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.coverage.html]
directory = "coverage/html"

[tool.coverage.xml]
output = "coverage/coverage.xml"

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["common"]

[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "F401",  # imported but unused (common in __init__.py)
]
exclude = [
    ".venv",
    "__pycache__", 
    "legacy",
    "build",
    "dist",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable
ignore_missing_imports = true
exclude = [
    "legacy/",
    "tests/",
    ".venv/",
]
