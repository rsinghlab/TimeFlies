# =============================================================================
# TIMEFLIES DEFAULT CONFIGURATION
# =============================================================================
# Shared settings across all projects. Project-specific overrides go in
# project folders (fruitfly_aging/, fruitfly_alzheimers/)

# =============================================================================
# PROJECT SETTINGS
# =============================================================================
project: fruitfly_alzheimers  # Options: fruitfly_aging, fruitfly_alzheimers

general:
  project_name: TimeFlies
  version: "1.0.0"
  random_state: 42

# =============================================================================
# HARDWARE CONFIGURATION
# =============================================================================
hardware:
  processor: "GPU"  # Options: "GPU", "CPU", "M" (Apple Silicon)
  memory_growth: true

# =============================================================================
# DATA CONFIGURATION
# =============================================================================
data:
  # Core data settings
  model: "CNN"  # Options: "CNN", "MLP", "logistic", "xgboost", "random_forest"
  tissue: "head"  # Options: "head", "body", "all"
  species: "drosophila"
  cell_type: "all"
  sex: "all"  # Options: "all", "male", "female"
  target_variable: "age"  # Target variable for prediction

  # Data processing options
  batch_correction:
    enabled: false  # Set to true to use batch-corrected data

  filtering:
    include_mixed_sex: false

  sampling:
    samples: 10000  # null for all samples, or specify number
    variables: null  # null for all genes, or specify number

  # Train-eval splitting configuration
  # "train" values: Used for model training (Keras handles internal validation split)
  # "test" values: Used for final evaluation on separate holdout adata_eval object
  # For "random" splits, entire dataset is used for training, eval uses full adata_eval
  split:
    method: "column"          # Options: "random" or "column"

    # Column-based splitting (ignored if method="random")
    column: "genotype"       # Column name to split on
    train: ["control"]       # Values for training from adata_train (can be multiple)
    test: ["ab42", "htau"]   # Values for evaluation from adata_eval (can be multiple)

    # Optional: Additional column filters (AND logic with main split)
    # These filters are applied to BOTH train and test sets from the main split above
    # Example: Train on control males aged 10-20, test on ab42/htau males aged 30
    # additional_filters:
    #   - column: "sex"
    #     values: ["male"]           # Only include males in both train and test
    #   - column: "age"
    #     train: [10, 20]           # Further filter training to ages 10-20
    #     test: [30]                # Further filter test to age 30

# =============================================================================
# FILE PATHS (AUTO-GENERATED FROM TEMPLATES)
# =============================================================================
# Uses template variables: {project}, {tissue}, {species}
paths:
  # Input/output data files
  data:
    train: "data/{project}/{tissue}/{species}_{tissue}_{project}_train.h5ad"
    eval: "data/{project}/{tissue}/{species}_{tissue}_{project}_eval.h5ad"
    original: "data/{project}/{tissue}/{species}_{tissue}_{project}_original.h5ad"
  # Batch-corrected versions
  batch_data:
    train: "data/{project}/{tissue}/{species}_{tissue}_{project}_train_batch.h5ad"
    eval: "data/{project}/{tissue}/{species}_{tissue}_{project}_eval_batch.h5ad"

# For hyperparameter tuning settings, see: configs/hyperparameter_tuning.yaml

# =============================================================================
# MODEL CONFIGURATION
# =============================================================================
model:
  # Training parameters
  training:
    epochs: 100
    batch_size: 32
    validation_split: 0.2
    early_stopping_patience: 8
    learning_rate: 0.001

  # CNN architecture
  cnn:
    filters: [32]              # Single convolutional layer
    kernel_sizes: [3]
    strides: [1]
    paddings: ["same"]
    pool_sizes: [2]
    pool_strides: [2]
    dense_units: [128]         # Single dense layer before output
    dropout_rate: 0.5
    activation: "relu"

  # MLP architecture
  mlp:
    hidden_layers: [512, 256, 128]
    activation: "relu"
    dropout_rate: 0.2

  # XGBoost architecture
  xgboost:
    n_estimators: 100
    max_depth: 6
    learning_rate: 0.1
    subsample: 0.8
    colsample_bytree: 0.8
    eval_metric: "mlogloss"

  # Random Forest architecture
  random_forest:
    n_estimators: 100
    max_depth: null  # No limit
    min_samples_split: 2
    min_samples_leaf: 1
    max_features: "sqrt"

  # Logistic Regression architecture
  logistic:
    max_iter: 1000
    C: 1.0  # Regularization strength
    penalty: "l2"
    solver: "lbfgs"

# =============================================================================
# PREPROCESSING CONFIGURATION
# =============================================================================
preprocessing:
  # Gene filtering options
  genes:
    remove_sex_genes: false          # Remove sex-linked genes (X/Y chromosomes)
    remove_autosomal_genes: false    # Remove autosomal genes (non-sex chromosomes)
    only_keep_lnc_genes: false       # Keep only long non-coding genes (regulatory RNAs)
    remove_lnc_genes: false          # Remove long non-coding genes
    remove_unaccounted_genes: false  # Remove genes not classified in any category
    highly_variable_genes: false     # Filter for highly variable genes across cells

  # Gene count balancing - experimental controls for bias testing
  balancing:
    balance_genes: false             # Balance gene counts between categories (e.g., equal autosomal vs sex genes)
    balance_lnc_genes: false         # Balance long non-coding RNA gene counts with other gene types

  # Gene randomization - control studies to test model robustness
  shuffling:
    shuffle_genes: false             # Randomly shuffle gene expression values to test if model learns meaningful patterns vs noise

# =============================================================================
# DATA PROCESSING CONFIGURATION
# =============================================================================
data_processing:
  # Data normalization
  normalization:
    enabled: false

# =============================================================================
# ANALYSIS CONFIGURATION
# =============================================================================
analysis:
  # Exploratory data analysis
  eda:
    enabled: false

  # Run project-specific analysis scripts
  run_analysis_script:
    enabled: false  # Set to true to run project-specific analysis after training

# Feature importance analysis
interpretation:
  shap:
    enabled: false           # Enable/disable SHAP interpretation (includes visualizations)
    load_existing: false     # Load existing SHAP values instead of computing
    reference_size: 100      # Reference size for SHAP analysis

# Visualizations
visualizations:
  enabled: true             # Enable general visualizations (training plots, confusion matrix, ROC curves, etc.)

# =============================================================================
# STORAGE CONFIGURATION
# =============================================================================
storage:
  cleanup_policy:
    keep_last_n: 10              # Keep N most recent experiments
    keep_days: 30                # Keep experiments from last N days
    keep_best: true              # Always keep experiments linked in best/
    auto_cleanup: true           # Run cleanup after each experiment

  model_saving:
    save_model_only_if_best: true    # Only save model.h5 if validation improves
    compress_predictions: false      # Compress large CSV files (future feature)

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging:
  level: "INFO"              # Options: "DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"
  format: "detailed"         # Options: "simple", "detailed", "json"
  to_file: false             # Save logs to file
  directory: "logs"          # Log directory
  filename: "timeflies.log"  # Log filename

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================
# For batch correction settings, see: configs/batch_correction.yaml
# For setup/splitting settings, see: configs/setup.yaml
