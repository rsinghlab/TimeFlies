Metadata-Version: 2.4
Name: timeflies
Version: 0.2.0
Summary: Machine Learning for Aging Analysis in Drosophila Single-Cell Data
Author: Singh Lab
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: tensorflow>=2.13.0
Requires-Dist: scikit-learn>=1.3.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: scanpy>=1.9.0
Requires-Dist: anndata>=0.9.0
Requires-Dist: matplotlib>=3.7.0
Requires-Dist: seaborn>=0.12.0
Requires-Dist: shap>=0.42.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: dill>=0.3.0
Requires-Dist: xgboost>=1.7.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-mock>=3.8.0; extra == "dev"
Requires-Dist: pytest-xdist>=3.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Provides-Extra: batch-correction
Requires-Dist: scvi-tools>=1.0.0; extra == "batch-correction"
Requires-Dist: torch>=2.0.0; extra == "batch-correction"
Dynamic: license-file

# TimeFlies 🧬

**Machine Learning for Aging Analysis**

A modern machine learning framework for analyzing aging patterns in Drosophila single-cell RNA sequencing data using deep learning with comprehensive visualization and SHAP interpretability.

## 🚀 Quick Start

### 1. Install TimeFlies
```bash
# Download the installer
curl -O https://raw.githubusercontent.com/yourusername/TimeFlies/main/install_timeflies.sh

# Run installation (creates Python 3.12+ environment)
bash install_timeflies.sh

# Activate environment
source activate.sh
```

### 2. Setup Project
```bash
# Create project structure and config
timeflies setup

# Add your H5AD data files
mkdir -p data/fruitfly_alzheimers/head
# Copy your *_original.h5ad files into data/[project]/[tissue]/
```

### 3. Run Analysis
```bash
# Split data for training
timeflies split

# Verify everything is ready
timeflies verify

# Train models
timeflies train

# Evaluate with SHAP interpretation
timeflies evaluate
```

## 🚀 Deployment Usage

### For End Users (Researchers)

1. **Install TimeFlies Package**
```bash
# Install from source (for now)
pip install -e git+<repository-url>#egg=timeflies

# Or local development install
pip install -e /path/to/TimeFlies
```

2. **Create Your Project Directory**
```bash
mkdir my_aging_research
cd my_aging_research
```

3. **Add Your Data**
```bash
# Create data directory and add your H5AD files
mkdir -p data/fruitfly_alzheimers/head
# Copy your *_original.h5ad files into the appropriate folders
```

4. **Initialize Configuration**
```bash
# First run creates config.yaml in your project directory
PYTHONPATH=/path/to/TimeFlies/src python3 /path/to/TimeFlies/run_timeflies.py verify

# Edit config.yaml to customize your analysis
nano config.yaml
```

5. **Run Your Analysis**
```bash
# Setup train/eval splits
PYTHONPATH=/path/to/TimeFlies/src python3 /path/to/TimeFlies/run_timeflies.py setup-all

# Run analysis with command chaining
PYTHONPATH=/path/to/TimeFlies/src python3 /path/to/TimeFlies/run_timeflies.py train --with-eda --with-analysis
```

### Project Structure for Users
```
my_aging_research/
├── config.yaml              # Your editable configuration (auto-created)
├── data/                     # Your input data
│   └── fruitfly_alzheimers/head/
│       └── your_data_original.h5ad
└── outputs/                  # All results go here (auto-created)
    └── fruitfly_alzheimers/
        ├── experiments/      # Training results with timestamps
        ├── eda/             # Exploratory data analysis
        └── analysis/        # Post-training analysis
```

### Key Benefits for Deployment
- **📋 Visible Config**: `config.yaml` appears in your project directory for easy editing
- **📁 Local Outputs**: All results stay in your project directory
- **🔧 No Hidden Files**: No system-wide configuration in `~/.timeflies`
- **🎛️ Full Control**: Edit any parameter in your visible config file
- **📊 Command Chaining**: Run multiple steps with `--with-eda`, `--with-analysis` flags

## 📋 Core Commands

| Command | Description |
|---------|-------------|
| `create-test-data` | Create test fixtures from real data |
| `setup` | Create stratified train/eval splits for all projects |
| `verify` | Verify environment and data setup |
| `train` | Train deep learning models |
| `evaluate` | Evaluate models with SHAP interpretation |
| `test` | Run test suite |

> 📖 **Detailed CLI reference**: See [docs/COMMANDS.md](docs/COMMANDS.md) for all options and examples

## 🔧 Configuration

### Switch Projects
Edit `configs/default.yaml`:
```yaml
project: fruitfly_aging  # or fruitfly_alzheimers
```

### Setup Parameters
Configure splits in `configs/setup.yaml`:
```yaml
data:
  train_test_split:
    split_size: 5000  # cells in eval set
general:
  random_state: 42    # for reproducible splits
```

## 🧬 Data Setup Features

### Multi-Project Support
- Automatically detects all projects in `data/` directory
- Processes both original and batch-corrected data
- Creates project-specific output directories

### Advanced Stratification
- **Primary**: Disease/age status from project config
- **Secondary**: Sex (sex/Sex/gender/Gender columns)
- **Tertiary**: Cell type (cell_type/celltype/cluster columns)

### Batch Correction Support
```bash
# Optional: Setup batch correction environment
bash setup_dev_env.sh  # choose 'y' for batch environment

# Activate batch environment
source activate_batch.sh

# Run batch correction (creates *_original_batch.h5ad)
python run_timeflies.py batch-correct

# Return to main environment
source activate.sh

# Re-run setup to create batch splits
python run_timeflies.py setup
```

## 📊 File Structure

### Data Organization
```
data/
├── fruitfly_aging/head/
│   ├── drosophila_head_aging_original.h5ad      # Source
│   ├── drosophila_head_aging_original_batch.h5ad # Batch corrected
│   ├── drosophila_head_aging_train.h5ad         # Training split
│   ├── drosophila_head_aging_eval.h5ad          # Evaluation split
│   ├── drosophila_head_aging_train_batch.h5ad   # Batch training split
│   └── drosophila_head_aging_eval_batch.h5ad    # Batch evaluation split
└── fruitfly_alzheimers/head/
    └── [similar structure]
```

### Output Organization  
```
outputs/
├── fruitfly_aging/
│   ├── models/     # Trained models
│   ├── results/    # SHAP analysis, plots
│   └── logs/       # Training logs
└── fruitfly_alzheimers/
    └── [similar structure]
```

## 🧪 Development

### Test Suite
```bash
# Run all tests
python run_timeflies.py test

# Run specific test types
python run_timeflies.py test --type unit
python run_timeflies.py test --type integration
python run_timeflies.py test --fast
```

### Project Structure
```
src/
├── common/          # Core framework
│   ├── cli/         # Command line interface
│   ├── core/        # Configuration management
│   ├── data/        # Data loading and preprocessing
│   ├── models/      # Model architectures
│   ├── evaluation/  # SHAP analysis and metrics
│   ├── analysis/    # EDA and visualizations
│   └── utils/       # Utilities
└── analysis/        # Project-specific analysis files
    ├── fruitfly_aging_analysis.py
    └── fruitfly_alzheimers_analysis.py
```

## 🎯 Key Features

- **🔄 Automated Setup**: One command sets up all projects
- **🧬 Smart Stratification**: Multi-level stratified splitting
- **🔒 Safe Operations**: Never overwrites existing data
- **📊 Batch Support**: Handles both original and batch-corrected data  
- **🎨 Clean Output**: Organized with clear progress indicators
- **🧪 Comprehensive Testing**: Unit, integration, and system tests
- **📈 SHAP Analysis**: Model interpretability with visualizations

## 🔬 Supported Projects

- **Fruitfly Aging**: Age-related gene expression analysis
- **Fruitfly Alzheimers**: Disease condition classification
- **Extensible**: Easy to add new projects

## ⚙️ Requirements

- Python 3.12+
- GPU support (optional, CPU fallback available)
- 8GB+ RAM recommended for large datasets

## 📄 License

See `LICENSE` file for details.

## Future Improvements

- Convert to Pytorch
- Combine batch correction and main env into one

---
